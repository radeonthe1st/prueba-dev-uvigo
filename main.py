import nats
import sqlite3
import time
import argparse # type: ignore
import asyncio
import random # type: ignore

parser = argparse.ArgumentParser(description='Infrared Sensor Reader')

parser.add_argument('--sensor-type', type=str, choices=['mockup', 'real'], required=True,
                    help='Sensor type: "mockup" or "real"')
parser.add_argument('--reading-frequency', type=int, required=True,
                    help='Reading frequency in seconds')
parser.add_argument('--min-value', type=int, help='Minimum value generated by the sensor (for "mockup" type)')
parser.add_argument('--max-value', type=int, help='Maximum value generated by the sensor (for "mockup" type)')
parser.add_argument('--db-uri', type=str, required=True,
                    help='URI to the SQL database')

args = parser.parse_args()
args_dict = {key: value for key, value in vars(args).items()}
print('==== Arguments ====')
for key, value in args_dict.items():
    print(f"{key:<20} {value}")
print('===================')

# Run the app
async def main():
    # Initialize NATS client
    nats_client = await nats.connect("nats://localhost:4222")

    # Initialize database
    conn = sqlite3.connect(args.db_uri)
    cursor = conn.cursor()

    # Create table to store data
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS infrared_data (
            id INTEGER PRIMARY KEY,
            reading_time REAL,
            data BLOB
        );
    """)

    # Initialize sensor reader
    if args.sensor_type == 'mockup':
        def read_data():
            return [random.randint(args.min_value, args.max_value) for _ in range(64)]
    else:
        # Replace with real sensor reader implementation
        def read_data():
            pass

    # Handle "start capture" and "stop capture" requests via NATS
    capture_running = False

    async def start_capture():
        global capture_running
        capture_running = True
        print("Starting capture")
        while capture_running:
            data = read_data()
            data_bytes = bytes(data)
            cursor.execute("INSERT INTO infrared_data (reading_time, data) VALUES (?, ?)", (time.time(), data_bytes))
            conn.commit()
            await asyncio.sleep(args.reading_frequency)

    async def stop_capture():
        global capture_running
        capture_running = False
        print("Stopping capture")

    async def message_handler(msg):
        if msg.subject == "test.start_capture":
            await start_capture()
        elif msg.subject == "test.stop_capture":
            await stop_capture()

    await nats_client.subscribe("test.*", cb=message_handler)

    # Run the app
    while True:
        await asyncio.sleep(1)

asyncio.run(main())